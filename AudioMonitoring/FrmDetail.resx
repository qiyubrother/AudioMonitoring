<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAA
        AAQAAAAFAAAABQAAAAQAAAADAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABcAAAAiAAAALgAA
        ADkAAABCAAAASgAAAE4AAABOAAAASgAAAEIAAAA5AAAALgAAACIAAAAXAAAADAAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAABgAAAAtAAAAQgAA
        AFcAAAByBAQEkwoKC7APDxDEEhETzRIRE80PDxDECgoLsAQEBJMAAAByAAAAVwAAAEIAAAAtAAAAGAAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACgAA
        ABUDAwMwFBMVeyIhI8YtLC7tNjQ2+zs5O/89Oz3/PTs9/zs5O/82NDb7LSwu7SEgI8YUExV7AwMDMAAA
        ABUAAAAKAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJyYpACIh
        JAA6ODoAKiksMDIwM6U7OTvyQT9A/z08PP81NDT/Ly4u/y0sLP8tLCz/Ly4u/zU0NP89Ozz/QT9A/zs6
        O/IyMTOkKiksLzg3OAAiISQAKCcqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0s
        LwArKi0AEhIXAzAuMl87OTvgQ0FC/zg2Nv8qKir/NDQ0/01NTf9kY2P/cG9v/3Bvb/9jY2P/TExM/zMz
        M/8qKSn/NzY2/0JBQf87OjzfMC8yXA4OEwIsKi4ALi0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAvLTAALCsuABgYHAM0MjVzQT9A9EA/P/8qKSn/Ojo6/3Jxcf+gm5n/u7Ct/8q6tv/Rv7r/0r+7/8u7
        t/+9sa//opyb/3FwcP85OTn/KSkp/0A+Pv9BP0HzNDM1cBQUGQMsKy8ALy4xAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALy0xACgnKwBaWFgANTM2ZENBQ/U9PDz/KCcn/1xcXP+emZj/uquo/8m0r//UvLf/2sK8/97F
        v//fxb//3MS+/9nBu//SvLf/w7Ow/6Kdm/9aWlr/JiYm/z07O/9DQUP0NjQ3YFFPTwAoJioAMC4xAAAA
        AAAAAAAAAAAAAAAAAAA2NDcANzU4ADQyNThDQUPlQD4//ycnJ/9tbW3/p5+d/7Gfm/+9qKP/yLKt/9K6
        tf/Zwbv/3cS+/93Fv//bw73/17+6/9K7tv/MtrD/w7Cr/7Gopv9ra2v/JiUl/z8+Pv9DQUPjNDM2NTc2
        OQA2NDgAAAAAAAAAAAAAAAAAMjA0ADMxNAArKS0KQD5Ar0dFRf8nJib/ZWVl/6Kbmv+ejor/qpiT/7ej
        nv/Drqn/z7iz/9fAuv/cxL7/3cS+/9rCvP/Vvbj/z7iz/8eyrf/Aq6b/uKWg/6+npf9jY2P/JiUl/0ZE
        Rf9APkCsKiktCTMyNQAzMjUAAAAAAAAAAAA3NjkAPDo9ADo4O0xJR0j2MzIy/0RERP+empn/joB8/5WE
        gf+hj4v/rpuX/72opP/Lta//1b64/9vDvf/cxL7/2MC7/9K7tf/KtK7/wayn/7ikn/+wnJj/qpmV/6ei
        of9BQkL/MjEx/0lHSPU6OTxIPTs+ADg2OQAAAAAAAAAAADUzNwAVFBoDQ0FEokdGRv8nJyf/hoaG/4uB
        f/9/cW3/iHp3/5aGgv+pl5P/tqKd/8Svqv/Su7X/28O9/9vDvf/Vvrj/zLax/8Ouqf+7p6L/rZuW/6SS
        jv+di4f/o5eU/4aFhf8mJSX/R0VF/0RCRJ4JCA8CNjQ3AAAAAAAAAAAAOjg7ADc2OR5LSErcOjg4/0FB
        Qf+cmZj/b2Rh/3JmY/+MenD/qpWI/6iYk/+rmZT/vKei/8+4s//XwLr/2MC7/9O7tv/Er6r/uaWg/7im
        oP+5opT/oY2D/45/e/+MfXr/paGg/z4+Pv85ODj/S0lK2jg2Ohw7OTwAAAAAAAAAAABAPkEAPz1ARE5M
        TfYtLCz/ampq/4qEg/9gVlP/lIFy/7SXff+OfXT/jX56/6WUj/+1o57/kYOA/2ZfXf9nYF7/lYeE/72q
        pf+wnpj/nYyJ/5+Lgv+9oIX/oY1+/3hraP+ak5H/aGho/ywrK/9OTE31QD5BQEA/QQAAAAAAAAAAAEdF
        SABEQkVkT01O/ykoKP+Dg4L/cGpo/4NzZ//GsJr/eGpk/3FlYv+Zh33/tKKY/3xyb/83Nzf/PT0+/z0+
        Pv85ODj/gnd0/7qnnf+hj4T/f3Fv/4Z3cP/LtJ3/jHtw/393dv+BgYH/JyYm/05MTf9FQ0ZgR0VIAAAA
        AAAAAAAAT01PAEhGSHZPTU3/KSko/4eGhv9lXlv/uph1/5eAbP9bUlH/emlf/8Khgf+QgHr/SEVE/0FB
        Qf9eXl7/X19f/0FCQv9LR0f/loV//8Oigv9+bWT/YlhW/5yEb/+6mHb/bGNh/4eGhv8oJyf/TkxN/0hG
        SXJPTU4AAAAAAAAAAABUUlQAS0lMeFJQUf8qKSn/goKC/2FZVv+9jl3/hmpR/1VNTP98aFr/vpFk/4Bx
        a/9GQ0P/UlJS/29vb/9vb2//UlJS/0dERP+Bcmv/vpFk/3tnWv9VTU3/iGxS/7uNXf9iWlj/goGB/ygo
        KP9SUFD/S0lMdVRSUwAAAAAAAAAAAFVTVQBOTE9qWlhZ/ywrK/94eHj/XFdX/4poSP+ufUz/V0xH/2BV
        Uv+Ydlj/lnlj/11VU/9YWFj/eHh4/3h4eP9YWFj/XldV/5d6Y/+Ydlj/YVZT/1lOSP+vfkz/iWhI/19a
        Wf93dnb/Kioq/1pYWf9OTU9lVFJUAAAAAAAAAAAAUE5RAE1MT01jYWL6NDMz/2NjY/9nY2L/SD46/5Jr
        R/+LaEn/XFBL/2FXVP9+a2H/fW5n/15YV/9iYF//YmBf/15ZV/99bmj/f2xh/2NYVf9fUk3/jWlK/5Js
        Sf9KQDz/a2Zl/2FhYf8zMjL/Y2Fi+E5MT0lQTlEAAAAAAAAAAABJR0oAR0VJJ2hmaOVJR0f/RERE/3d1
        dP8+ODf/RTw6/21WRf9+ZFH/aFpU/2BWVP9pXlz/cWVi/3BkYv9wZGL/cWVi/2pfXP9hV1X/a1xW/4Bm
        U/9uWEf/SEA9/0M8O/95d3b/QkFC/0hHR/9oZmfjR0VJJElHSgAAAAAAAAAAAEE/QwAmJCoHZmRms2Zk
        ZP8vLi7/dHNz/0xHRv88NTT/QDk4/01DQP9aT0r/V01L/1tRT/9gVlT/ZFlX/2RZV/9hVlT/XFJQ/1hP
        TP9cUEv/T0VC/0M8O/9AOTf/UUxK/3Nzc/8tLS3/ZWRk/2ZkZrAhHyUGQT9DAAAAAAAAAAAAT01PAGtp
        awBbWVxgeHZ3/ENCQv9KSkr/bWtr/zs1NP87NTP/Pzg3/0M8O/9JQUD/TkVE/1FIR/9TSkj/U0pI/1JJ
        R/9PRkX/SkNB/0U+PP9BOjn/Pjc2/z85N/9wbW3/SEhI/0NBQf94dnf7W1lcXWhmaQBJR0sAAAAAAAAA
        AAA9O0AAS0lNAEJARBRzcXPHc3Fy/zIyMv9lZWX/XVpZ/zcxL/85MzL/PTY1/0A5OP9DPDr/RT08/0Y+
        Pf9GPj3/RT48/0Q8O/9BOjn/Pjg2/zs1NP85MzL/YF1c/2RkZP8xMDD/c3Fy/3Jwc8RAP0MTSkhMAD48
        QAAAAAAAAAAAAAAAAACAfn8AcnBzAF1bX1KDgYP0ZWNj/zU0NP9sbGz/W1hX/zcxMP82MC//OTMy/zs0
        M/88NTT/PDU0/zw2NP88NjT/OzU0/zo0M/84MjH/OTQy/15aWv9tbGz/MzMz/2VjY/+DgYPyXVtfT29t
        cABpZ2kAAAAAAAAAAAAAAAAAAAAAAD48QQBAPkMABQQLBGxrboiNi4z+YmBg/zg3N/9oZ2f/aWdm/0M+
        Pf81Ly7/NC4t/zUvLv81MC7/NjAv/zYwLv81Ly7/NjAv/0VAP/9raGj/Z2Zm/zY2Nv9iYGD/jIuM/mxq
        boQAAAADPz5CAD89QgAAAAAAAAAAAAAAAAAAAAAAAAAAAEhGSwBPTVEAPDo/DnVzdpuTkZP/cW9v/z08
        PP9SUlL/cXBw/2dlZP9RTUz/Qz49/z45OP8+OTj/RD8+/1JOTf9oZmX/cXBw/1BQUP88Ozv/cG9v/5OR
        kv51c3aXOjg+DU5NUQBIRkoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOzpAAFVTWABVU1gAPTtBD3Rz
        douWlJb1joyM/1xaWv9CQUH/T09P/2NjY/9sbGz/b25u/29ubv9sbGz/YmJi/05OTv9BQED/W1pa/42L
        jP+WlJb1dHJ2iDs5Pw1VU1cAVFJXADw7PwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDpAAFhW
        WwBRUFUACwkRBWpobFiNi47NoJ6g/pSSk/92dHT/XVtb/1FQUP9OTU3/TkxM/1FPT/9cW1v/dXNz/5SS
        kv+fnp/+jIuOzGpobFUDAQkEUU9UAFdVWgA+PEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAOjk/AEtJTwBBP0UAkpGTAExKUBl0c3drj42Rv6Ceoe2npaf+p6Wm/6akpf+lo6T/pqWm/6el
        pv6gnqDsj42QvXRyd2pKSE4YjYuOAEA/RABLSU4AOzk/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD07QgD///8AVVRZAKOipAAwLzYMYmBmMXZ0eV2CgIV9iYeLjImH
        i4yCgIV9dnR5XGFfZTEvLTUMn52gAFRSWAD///8APjxCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8OkEAAAAAAEhGTABlY2gAiIaLAL69
        vgD///8A////ALy7vQCHhooAZGJoAEhGTAAAAAAAPDpBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA9O0MAPTtDAD08QwA9O0MAPTtDAD07QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP4AAAB8AAAAPAAAADgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAADwAAAA+AA
        AAfgAAAH8AAAD/gAAB/+AAB//4AB///4H/8=
</value>
  </data>
</root>